Imports Newtonsoft.Json.Linq
Imports System
Imports System.Data
Imports System.Linq

Namespace JsonToDataTable
    Class Program
        Private Shared Sub Main(ByVal args As String())
            Dim json As String = "YourComplexJsonHere"
            Dim jObject As JObject = JObject.Parse(json)
            Dim dataTable As DataTable = FlattenJObjectToDataTable(jObject)
        End Sub

        Private Shared Function FlattenJObjectToDataTable(ByVal jObject As JObject) As DataTable
            Dim dataTable As DataTable = New DataTable()
            FlattenTokenToDataTable(jObject, dataTable, "")
            Return dataTable
        End Function

        Private Shared Sub FlattenTokenToDataTable(ByVal token As JToken, ByVal dataTable As DataTable, ByVal prefix As String)
            Select Case token.Type
                Case JTokenType.Object

                    For Each prop In token.Children(Of JProperty)()
                        FlattenTokenToDataTable(prop.Value, dataTable, Join(prefix, prop.Name))
                    Next

                Case JTokenType.Array
                    Dim array = TryCast(token, JArray)

                    For i As Integer = 0 To array.Count - 1
                        FlattenTokenToDataTable(array(i), dataTable, Join(prefix, i.ToString()))
                    Next

                Case Else

                    If Not dataTable.Columns.Contains(prefix) Then
                        dataTable.Columns.Add(prefix)
                    End If

                    Dim row As DataRow

                    If dataTable.Rows.Count <= 0 Then
                        row = dataTable.NewRow()
                        dataTable.Rows.Add(row)
                    Else
                        row = dataTable.Rows(dataTable.Rows.Count - 1)

                        If row(prefix) IsNot Nothing AndAlso row(prefix) <> DBNull.Value Then
                            row = dataTable.NewRow()
                            dataTable.Rows.Add(row)
                        End If
                    End If

                    row(prefix) = token.ToString()
            End Select
        End Sub

        Private Shared Function Join(ByVal prefix As String, ByVal name As String) As String
            Return If(String.IsNullOrEmpty(prefix), name, $"{prefix}_{name}")
        End Function
    End Class
End Namespace
