Imports Newtonsoft.Json.Linq
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Linq

Namespace JsonToDataTable
    Class Program
        Private Shared Sub Main(ByVal args As String())
            Dim json As String = _
            Dim parsedJson As JObject = JObject.Parse("{ ""transactions"": " & json & "}")
            Dim dataTable = GenerateDataTable(parsedJson)

            For Each column As DataColumn In dataTable.Columns
                Console.Write(column.ColumnName & vbTab)
            Next

            Console.WriteLine()

            For Each row As DataRow In dataTable.Rows

                For i = 0 To dataTable.Columns.Count - 1
                    Console.Write(row(i) & vbTab)
                Next

                Console.WriteLine()
            Next
        End Sub

        Private Shared Function GenerateDataTable(ByVal json As JObject) As DataTable
            Dim dataTable = New DataTable()
            Dim allProperties = New HashSet(Of String)()

            For Each transaction In json("transactions")
                Dim properties = FindAllProperties(transaction)
                allProperties.UnionWith(properties)
            Next

            For Each [property] In allProperties
                dataTable.Columns.Add([property])
            Next

            For Each transaction In json("transactions")
                Dim row = dataTable.NewRow()

                For Each [property] In allProperties
                    Dim token = transaction.SelectToken([property])

                    If token IsNot Nothing Then
                        row([property]) = token.ToString()
                    End If
                Next

                dataTable.Rows.Add(row)
            Next

            Return dataTable
        End Function

        Private Shared Function FindAllProperties(ByVal token As JToken, ByVal Optional currentPath As String = "", ByVal Optional properties As HashSet(Of String) = Nothing) As HashSet(Of String)
            If properties Is Nothing Then
                properties = New HashSet(Of String)()
            End If

            If token.Type = JTokenType.Object Then

                For Each child In token.Children(Of JProperty)()
                    FindAllProperties(child.Value, $"{currentPath}{child.Name}_", properties)
                Next
            ElseIf token.Type = JTokenType.Array Then
                Dim arrayPath = $"{currentPath}0_"

                For Each child In token(0).Children(Of JProperty)()
                    FindAllProperties(child.Value, arrayPath & child.Name & "_", properties)
                Next
            Else
                properties.Add(currentPath.TrimEnd("_"c))
            End If

            Return properties
        End Function
    End Class
End Namespace
