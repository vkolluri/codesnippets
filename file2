Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Collections.Generic

Module Program
    Sub Main()
        ' Your complex JSON string
        Dim jsonString As String = "{
            ""key1"": ""value1"",
            ""key2"": {
                ""nestedKey1"": ""nestedValue1"",
                ""nestedKey2"": ""nestedValue2""
            },
            ""key3"": ""value3""
        }"

        ' Deserialize the JSON string to a JObject
        Dim jsonObject As JObject = JsonConvert.DeserializeObject(Of JObject)(jsonString)

        ' Flatten the JSON into a Dictionary(Of String, String)
        Dim flattenedDictionary As Dictionary(Of String, String) = FlattenJsonObject(jsonObject)

        ' Print the flattened dictionary
        For Each kvp In flattenedDictionary
            Console.WriteLine($"{kvp.Key}: {kvp.Value}")
        Next
    End Sub

    ' Recursively flatten a JSON object into a Dictionary(Of String, String)
    Private Function FlattenJsonObject(jsonObj As JObject, Optional prefix As String = "") As Dictionary(Of String, String)
        Dim flattenedDictionary As New Dictionary(Of String, String)()

        For Each prop As JProperty In jsonObj.Properties()
            Dim propertyName As String = prop.Name
            Dim propertyValue As JToken = prop.Value

            If propertyValue.Type = JTokenType.Object Then
                Dim nestedObject As JObject = DirectCast(propertyValue, JObject)
                Dim nestedPrefix As String = If(String.IsNullOrEmpty(prefix), propertyName, $"{prefix}.{propertyName}")
                Dim nestedFlattenedDictionary As Dictionary(Of String, String) = FlattenJsonObject(nestedObject, nestedPrefix)
                For Each kvp In nestedFlattenedDictionary
                    flattenedDictionary(kvp.Key) = kvp.Value
                Next
            ElseIf propertyValue.Type = JTokenType.Array Then
                Dim index As Integer = 0
                For Each item As JToken In propertyValue
                    Dim itemPrefix As String = If(String.IsNullOrEmpty(prefix), propertyName, $"{prefix}.{propertyName}[{index}]")
                    If item.Type = JTokenType.Object Then
                        Dim nestedObject As JObject = DirectCast(item, JObject)
                        Dim nestedFlattenedDictionary As Dictionary(Of String, String) = FlattenJsonObject(nestedObject, itemPrefix)
                        For Each kvp In nestedFlattenedDictionary
                            flattenedDictionary(kvp.Key) = kvp.Value
                        Next
                    Else
                        flattenedDictionary(itemPrefix) = item.ToString()
                    End If
                    index += 1
                Next
            Else
                flattenedDictionary($"{prefix}.{propertyName}") = propertyValue.ToString()
            End If
        Next

        Return flattenedDictionary
    End Function
End Module
