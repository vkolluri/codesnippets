using System;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

class Program
{
    static async Task Main(string[] args)
    {
        // Connection strings for source and destination databases
        string sourceConnectionString = "YourSourceDatabaseConnectionString";
        string destinationConnectionString = "YourDestinationDatabaseConnectionString";

        // SQL query to read data from source
        string sourceQuery = "SELECT * FROM SourceTable";

        // TPL Dataflow block for reading data
        var readBlock = new TransformBlock<int, YourDataType>(
            async _ =>
            {
                using (var sourceConnection = new SqlConnection(sourceConnectionString))
                {
                    var command = new SqlCommand(sourceQuery, sourceConnection);
                    await sourceConnection.OpenAsync();
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        // Read data and transform into your data type
                        // For example, read each row and create an object of YourDataType
                        // return that object
                    }
                }
                return new YourDataType(); // Replace with actual data read
            },
            new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 1 }); // Adjust parallelism as needed

        // TPL Dataflow block for writing data
        var writeBlock = new ActionBlock<YourDataType>(
            async data =>
            {
                using (var destinationConnection = new SqlConnection(destinationConnectionString))
                {
                    // Prepare your insert command
                    var command = new SqlCommand("INSERT INTO DestinationTable (...) VALUES (...)", destinationConnection);
                    // Set parameters for the command based on 'data'

                    await destinationConnection.OpenAsync();
                    await command.ExecuteNonQueryAsync();
                }
            },
            new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 4 }); // Adjust parallelism as needed

        // Link the blocks
        readBlock.LinkTo(writeBlock, new DataflowLinkOptions { PropagateCompletion = true });

        // Start the dataflow process
        readBlock.Post(0); // Posting 0 just to trigger the read in this example

        // Mark the head of the pipeline as complete
        readBlock.Complete();

        // Wait for the last block in the pipeline to process all messages
        await writeBlock.Completion;
    }
}

public class YourDataType
{
    // Define the properties that map to your data structure
}
