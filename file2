Imports Newtonsoft.Json
Imports System
Imports System.Collections.Generic

Module Program
    Sub Main()
        ' Your complex JSON string
        Dim jsonString As String = "{
            ""key1"": ""value1"",
            ""key2"": {
                ""nestedKey1"": ""nestedValue1"",
                ""nestedKey2"": ""nestedValue2""
            },
            ""key3"": ""value3""
        }"

        ' Deserialize the JSON string into a Dictionary(Of String, Object)
        Dim jsonObject As Dictionary(Of String, Object) = JsonConvert.DeserializeObject(Of Dictionary(Of String, Object))(jsonString)

        ' Flatten the dictionary to a Dictionary(Of String, String)
        Dim flattenedDictionary As Dictionary(Of String, String) = FlattenJsonObject(jsonObject)

        ' Print the flattened dictionary
        For Each kvp In flattenedDictionary
            Console.WriteLine($"{kvp.Key}: {kvp.Value}")
        Next
    End Sub

    ' Recursively flatten a nested dictionary to a Dictionary(Of String, String)
    Private Function FlattenJsonObject(jsonObject As Dictionary(Of String, Object)) As Dictionary(Of String, String)
        Dim flattenedDictionary As New Dictionary(Of String, String)()

        For Each kvp In jsonObject
            If TypeOf kvp.Value Is String Then
                flattenedDictionary.Add(kvp.Key, kvp.Value.ToString())
            ElseIf TypeOf kvp.Value Is Dictionary(Of String, Object) Then
                Dim nestedObject As Dictionary(Of String, Object) = DirectCast(kvp.Value, Dictionary(Of String, Object))
                Dim nestedFlattenedDictionary As Dictionary(Of String, String) = FlattenJsonObject(nestedObject)
                For Each nestedKvp In nestedFlattenedDictionary
                    flattenedDictionary.Add($"{kvp.Key}.{nestedKvp.Key}", nestedKvp.Value)
                Next
            End If
        Next

        Return flattenedDictionary
    End Function
End Module
