using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

public static class ExcelExporter
{
    public static void ExportToExcel<T>(List<T> data, string filePath)
    {
        // Create a new spreadsheet document
        using (var spreadsheet = SpreadsheetDocument.Create(filePath, SpreadsheetDocumentType.Workbook))
        {
            var workbookPart = spreadsheet.AddWorkbookPart();
            workbookPart.Workbook = new Workbook();

            var worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            var worksheet = new Worksheet();
            var sheetData = new SheetData();

            worksheet.AppendChild(sheetData);

            var sheets = spreadsheet.WorkbookPart.Workbook.AppendChild(new Sheets());
            var sheet = new Sheet
            {
                Id = spreadsheet.WorkbookPart.GetIdOfPart(worksheetPart),
                SheetId = 1,
                Name = "Sheet1"
            };
            sheets.AppendChild(sheet);

            var properties = typeof(T).GetProperties();

            // Add headers
            var headerRow = new Row();
            foreach (var prop in properties)
            {
                var cell = new Cell(new InlineString(new Text(prop.Name)));
                headerRow.AppendChild(cell);
            }
            sheetData.AppendChild(headerRow);

            // Add data
            foreach (var item in data)
            {
                var dataRow = new Row();
                foreach (var prop in properties)
                {
                    var value = prop.GetValue(item);
                    var cell = new Cell(new InlineString(new Text(value?.ToString())));
                    dataRow.AppendChild(cell);
                }
                sheetData.AppendChild(dataRow);
            }

            worksheetPart.Worksheet = worksheet;
        }
    }
}
