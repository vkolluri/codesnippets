class HtmlTableRenderer<T>
{
    public static string RenderToHtml(T obj)
    {
        if (obj == null)
        {
            return string.Empty;
        }

        Type objectType = typeof(T);
        PropertyInfo[] properties = objectType.GetProperties();

        StringBuilder html = new StringBuilder();
        html.Append("<table border='1'>");

        foreach (PropertyInfo property in properties)
        {
            html.Append("<tr>");
            html.AppendFormat("<th>{0}</th>", property.Name);
            html.AppendFormat("<td>{0}</td>", RenderPropertyValue(property.GetValue(obj)));
            html.Append("</tr>");
        }

        html.Append("</table>");
        return html.ToString();
    }

    private static string RenderPropertyValue(object value)
    {
        if (value == null)
        {
            return string.Empty;
        }

        Type valueType = value.GetType();

        if (valueType.IsPrimitive || valueType == typeof(string) || valueType.IsEnum)
        {
            // Render simple values directly
            return value.ToString();
        }
        else if (valueType.IsClass)
        {
            // Recursively render nested objects
            return RenderToHtml(value);
        }
        else if (valueType.IsGenericType && valueType.GetGenericTypeDefinition() == typeof(List<>))
        {
            // Handle lists of objects
            var list = (IEnumerable<object>)value;
            StringBuilder listHtml = new StringBuilder("<ul>");

            foreach (var item in list)
            {
                listHtml.AppendFormat("<li>{0}</li>", RenderPropertyValue(item));
            }

            listHtml.Append("</ul>");
            return listHtml.ToString();
        }
        else
        {
            // Handle other complex types as needed
            return value.ToString();
        }
    }
}
