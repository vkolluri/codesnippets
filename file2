using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

class Program
{
    static async Task Main(string[] args)
    {
        string sourceConnectionString = "YourSourceConnectionString";
        string destinationConnectionString = "YourDestinationConnectionString";
        string query = "YourQuery";

        try
        {
            // Load data from source
            DataTable dataTable = await LoadDataFromSourceAsync(sourceConnectionString, query);

            // Define the Dataflow blocks
            var bufferBlock = new BufferBlock<DataTable>();
            var actionBlock = new ActionBlock<DataTable>(data => TransferToDestinationAsync(data, destinationConnectionString));

            // Link the blocks
            bufferBlock.LinkTo(actionBlock, new DataflowLinkOptions { PropagateCompletion = true });

            // Post data to the first block
            bufferBlock.Post(dataTable);

            // Signal completion to the first block
            bufferBlock.Complete();

            // Wait for the last block to process all messages
            await actionBlock.Completion;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    static async Task<DataTable> LoadDataFromSourceAsync(string connectionString, string query)
    {
        DataTable dataTable = new DataTable();
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = await command.ExecuteReaderAsync())
                {
                    dataTable.Load(reader);
                }
            }
        }
        return dataTable;
    }

    static async Task TransferToDestinationAsync(DataTable data, string connectionString)
    {
        using (SqlConnection destConnection = new SqlConnection(connectionString))
        {
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(destConnection))
            {
                bulkCopy.DestinationTableName = "DestinationTableName"; // Set your destination table name here

                await destConnection.OpenAsync();
                await bulkCopy.WriteToServerAsync(data);
            }
        }
    }
}
